podman-compose -f /root/ELK/elastic-composev2.yml up
podman-compose version: 1.0.6
['podman', '--version', '']
using podman version: 4.6.1
Traceback (most recent call last):
  File "/usr/bin/podman-compose", line 33, in <module>
    sys.exit(load_entry_point('podman-compose==1.0.6', 'console_scripts', 'podman-compose')())
  File "/usr/lib/python3.9/site-packages/podman_compose.py", line 2940, in main
    podman_compose.run()
  File "/usr/lib/python3.9/site-packages/podman_compose.py", line 1420, in run
    self._parse_compose_file()
  File "/usr/lib/python3.9/site-packages/podman_compose.py", line 1487, in _parse_compose_file
    content = yaml.safe_load(f)
  File "/usr/lib64/python3.9/site-packages/yaml/__init__.py", line 162, in safe_load
    return load(stream, SafeLoader)
  File "/usr/lib64/python3.9/site-packages/yaml/__init__.py", line 114, in load
    return loader.get_single_data()
  File "/usr/lib64/python3.9/site-packages/yaml/constructor.py", line 49, in get_single_data
    node = self.get_single_node()
  File "/usr/lib64/python3.9/site-packages/yaml/composer.py", line 36, in get_single_node
    document = self.compose_document()
  File "/usr/lib64/python3.9/site-packages/yaml/composer.py", line 55, in compose_document
    node = self.compose_node(None, None)
  File "/usr/lib64/python3.9/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/usr/lib64/python3.9/site-packages/yaml/composer.py", line 133, in compose_mapping_node
    item_value = self.compose_node(node, item_key)
  File "/usr/lib64/python3.9/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/usr/lib64/python3.9/site-packages/yaml/composer.py", line 133, in compose_mapping_node
    item_value = self.compose_node(node, item_key)
  File "/usr/lib64/python3.9/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/usr/lib64/python3.9/site-packages/yaml/composer.py", line 127, in compose_mapping_node
    while not self.check_event(MappingEndEvent):
  File "/usr/lib64/python3.9/site-packages/yaml/parser.py", line 98, in check_event
    self.current_event = self.state()
  File "/usr/lib64/python3.9/site-packages/yaml/parser.py", line 428, in parse_block_mapping_key
    if self.check_token(KeyToken):
  File "/usr/lib64/python3.9/site-packages/yaml/scanner.py", line 116, in check_token
    self.fetch_more_tokens()
  File "/usr/lib64/python3.9/site-packages/yaml/scanner.py", line 223, in fetch_more_tokens
    return self.fetch_value()
  File "/usr/lib64/python3.9/site-packages/yaml/scanner.py", line 577, in fetch_value
    raise ScannerError(None, None,
yaml.scanner.ScannerError: mapping values are not allowed here
  in "/root/ELK/elastic-composev2.yml", line 17, column 31

  
# cat /root/ELK/elastic-composev2.yml
version: '3'

services:
  elasticsearch:
    image: registry.connect.redhat.com/elastic/elasticsearch:8.11.1-63f123cb
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=W+deOwxFCeHsVkRjadasdsadtLJASDJADJ
      - KIBANA_PASSWORD=W+deOwxFCe2xxHsVkRjtCJADKJADksjakdj
    volumes:
      - /elasticsearch/single-node/data/:/usr/share/elasticsearch/data
      - /elasticsearch/single-node/logs/:/usr/share/elasticsearch/logs
      - /elasticsearch/single-node/data/certs/:/usr/share/elasticsearch/config/certs
      - /etc/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    command: bash -c '
        echo "ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}"
        echo "KIBANA_PASSWORD: ${KIBANA_PASSWORD}"

        if [ x"${ELASTIC_PASSWORD}" == x ] || [ x"${KIBANA_PASSWORD}" == x ]; then
          echo "Set the ELASTIC_PASSWORD and KIBANA_PASSWORD environment variables";
          exit 1;
        fi;

        mkdir -p config/certs;

        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          podman exec -it elasticsearch bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;

        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
            "instances:\n"\
            "  - name: elasticsearch\n"\
            "    dns:\n"\
            "      - elasticsearch\n"\
            > config/certs/instances.yml;

          podman exec -it elasticsearch bin/elasticsearch-certutil cert --silent --pem \
              -out config/certs/certs.zip \
              --in config/certs/instances.yml \
              --ca-cert config/certs/ca/ca.crt \
              --ca-key config/certs/ca/ca.key;

          unzip config/certs/certs.zip -d config/certs;
        fi;

        echo "Setting file permissions";
        podman exec -it elasticsearch chown -R root:root config/certs;
        podman exec -it elasticsearch find . -type d -exec chmod 750 {} \;
        podman exec -it elasticsearch find . -type f -exec chmod 640 {} \;

        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q "missing authentication credentials"; do
          sleep 30;
        done;

        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://localhost:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do
          sleep 10;
        done;

        echo "All done!";'
    ports:
      - "9200:9200"
      - "9300:9300"
    group: "podman"

networks:
  elastic:
    driver: bridge

