Crear el directorio para la configuración del socket de Podman:

sudo mkdir -p /etc/systemd/system/podman.socket.d

Este comando crea la estructura de directorios para almacenar archivos de configuración relacionados con el socket de Podman.

==================================================================================================================================================================
Crear y configurar podman.conf:



# Crear el archivo
vi /etc/systemd/system/podman.socket.d/podman.conf

Agrega el siguiente contenido a podman.conf:


ini
[Socket]
ListenStream=
ListenStream=/var/run/docker.sock
SocketMode=770
SocketUser=elastic
SocketGroup=podman


Establece la propiedad y los permisos:

sudo chown root:root /etc/systemd/system/podman.socket.d/podman.conf
sudo chmod 0644 /etc/systemd/system/podman.socket.d/podman.conf

==================================================================================================================================================================
Crear el script docker:

vi /usr/bin/docker
Agrega el siguiente contenido a /usr/bin/docker:

#!/bin/bash
podman-remote --url unix:///var/run/docker.sock "$@"


Establece permisos:

sudo chmod 0755 /usr/bin/docker

==================================================================================================================================================================
Configurar storage.conf:

# Agrega estas líneas a la sección [storage] en el archivo /etc/containers/storage.conf
sudo nano /etc/containers/storage.conf
Agrega:

ini

runroot = "/mnt/data/docker/runroot/"
graphroot = "/mnt/data/docker"

==================================================================================================================================================================
Habilitar los servicios de Podman:


sudo systemctl enable podman.service
sudo systemctl enable podman-restart.service

==================================================================================================================================================================
Habilitar el módulo del kernel overlay:

echo "overlay" | sudo tee -a /etc/modules-load.d/overlay.conf

==================================================================================================================================================================
Formatear la partición de datos adicional:

sudo mkfs.xfs /dev/nvme1n1

==================================================================================================================================================================
Crear el directorio de punto de montaje:

sudo install -o elastic -g elastic -d -m 700 /mnt/data

==================================================================================================================================================================
Agregar entrada a /etc/fstab para el volumen XFS:


sudo nano /etc/fstab
Agrega la línea (ajusta /dev/nvme1n1 según sea necesario):

/dev/nvme1n1 /mnt/data xfs defaults,nofail,x-systemd.automount,prjquota,pquota 0 2

Luego reinicia:
sudo systemctl daemon-reload
sudo systemctl restart local-fs.target

==================================================================================================================================================================
Establecer permisos en el dispositivo montado:

ls /mnt/data
sudo chown elastic:elastic /mnt/data

==================================================================================================================================================================
Crear el directorio de almacenamiento del servicio Docker:

sudo install -o elastic -g elastic -d -m 700 /mnt/data/docker

==================================================================================================================================================================
Deshabilitar el servicio firewalld:

sudo systemctl disable firewalld

==================================================================================================================================================================
Configurar parámetros del kernel:

sudo nano /etc/sysctl.conf
Agrega el siguiente contenido:

ini

vm.max_map_count=262144
net.ipv4.ip_forward=1
net.ipv4.tcp_retries2=5
vm.swappiness=1


Aplica la nueva configuración:

sudo sysctl -p
sudo systemctl restart NetworkManager

==================================================================================================================================================================
Ajustar los límites del sistema:

sudo nano /etc/security/limits.conf
Agrega los valores de configuración especificados.

==================================================================================================================================================================
Opcional: Autenticar al usuario elastic para el registro de Docker:

nano /home/elastic/.docker/config.json
Agrega el token de autenticación para el registro de Docker.

==================================================================================================================================================================
Reiniciar el servicio de Podman:

sudo systemctl daemon-reload
sudo systemctl restart podman

==================================================================================================================================================================
Reiniciar el host de RHEL:

sudo reboot


Estos pasos configuran el entorno para ejecutar Elastic en una instancia de un solo nodo utilizando Podman. Asegúrate de seguir cuidadosamente cada paso y modifica las configuraciones según sea necesario para tu configuración específica.

________________________________________________________________________________________________________________________________________________________________





==================================================================================================================================================================================================================
Before creating the container from the downloaded image, we need to create the data directory with the required ownership and SELinux context.


# mkdir /dbdata
# chown -R 27:27 /dbdata/
# semanage fcontext -a -t container_file_t '/dbdata(./*)?'
# restorecon -RFv /dbdata/
[root@openshift-lab ~]# semanage fcontext -a -t container_file_t '/dbdata(./*)?'
[root@openshift-lab ~]# restorecon -RFv /dbdata/
Relabeled /dbdata from unconfined_u:object_r:default_t:s0 to system_u:object_r:container_file_t:s0


# Habilitar el servicio para el puerto 9200 (Elasticsearch)
firewall-cmd --permanent --add-service=9200/tcp --zone=public --add-interface=elastic --permanent
firewall-cmd --permanent --add-service=9200/tcp --zone=trusted --add-interface=elastic --permanent

# Habilitar el servicio para el puerto 9300 (Elasticsearch)
firewall-cmd --permanent --add-service=9300/tcp --zone=public --add-interface=elastic --permanent
firewall-cmd --permanent --add-service=9300/tcp --zone=trusted --add-interface=elastic --permanent

# Habilitar el servicio para el puerto 5601 (Kibana)
firewall-cmd --permanent --add-service=5601/tcp --zone=public --add-interface=elastic --permanent
firewall-cmd --permanent --add-service=5601/tcp --zone=trusted --add-interface=elastic --permanent

# Habilitar el servicio para el puerto 5044 (Logstash)
firewall-cmd --permanent --add-service=5044/tcp --zone=public --add-interface=elastic --permanent
firewall-cmd --permanent --add-service=5044/tcp --zone=trusted --add-interface=elastic --permanent

firewall-cmd --reload
systemctl status firewalld

elasticsearch.yml
------------------
cluster.name: single_node_podman
node.name: elasticsearch
path.data: /usr/share/elasticsearch/data
path.logs: /usr/share/elasticsearch/data
network.host: 0.0.0.0
discovery.type: single-node
xpack.license.self_generated.type: basic
#xpack.license.self_generated.type: trial
xpack.monitoring.collection.enabled: true
xpack.security.autoconfiguration.enabled: true
xpack.security.enabled: true
xpack.security.authc.api_key.enabled: true
xpack.security.enrollment.enabled: true
# Configuracion nativa - requiere persistencia y se administra a traves de kibana
#xpack.security.authc.realms.native.native1.type: native
#xpack.security.authc.realms.native.native1.order: 0
#xpack.security.authc.realms.native.native1.users.elastic: "elastic:podman_elastic:superuser"

# configuracion SSL | Certificados
#xpack.security.http.ssl.enabled: true
#xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/elastic-certificates.p12
#xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/elastic-certificates.p12
#xpack.security.transport.ssl.enabled: false
#xpack.security.transport.ssl.verification_mode: certificate




[root@dkr-elk-hc01 ~]# podman exec -it elasticsearch /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana
WARNING: Owner of file [/usr/share/elasticsearch/config/users] used to be [root], but now is [elasticsearch]
WARNING: Owner of file [/usr/share/elasticsearch/config/users_roles] used to be [root], but now is [elasticsearch]
Unable to create enrollment token for scope [kibana]

ERROR: Unable to create an enrollment token. Elasticsearch node HTTP layer SSL configuration is not configured with a keystore, with exit code 73


          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;



# Use the ENCRYPTION_KEY variable as needed
echo "XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}"
echo "XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}"
echo "XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}"


grep denied /var/log/audit/audit.log
type=AVC msg=audit(1705440041.589:269): avc:  denied  { read } for  pid=8761 comm="node" name="kibana" dev="dm-2" ino=8414950 scontext=system_u:system_r:container_t:s0:c651,c905 tcontext=unconfined_u:object_r:unlabeled_t:s0 tclass=dir permissive=0
type=AVC msg=audit(1705440043.755:276): avc:  denied  { read } for  pid=8761 comm="node" name="kibana" dev="dm-2" ino=8414950 scontext=system_u:system_r:container_t:s0:c651,c905 tcontext=unconfined_u:object_r:unlabeled_t:s0 tclass=dir permissive=0
type=AVC msg=audit(1705440043.888:277): avc:  denied  { read } for  pid=8761 comm="node" name="kibana" dev="dm-2" ino=8414950 scontext=system_u:system_r:container_t:s0:c651,c905 tcontext=unconfined_u:object_r:unlabeled_t:s0 tclass=dir permissive=0
type=AVC msg=audit(1705440043.912:278): avc:  denied  { write } for  pid=8761 comm="node" name="kibana" dev="dm-2" ino=8414950 scontext=system_u:system_r:container_t:s0:c651,c905 tcontext=unconfined_u:object_r:unlabeled_t:s0 tclass=dir permissive=0
