Crear el directorio para la configuración del socket de Podman:

sudo mkdir -p /etc/systemd/system/podman.socket.d

Este comando crea la estructura de directorios para almacenar archivos de configuración relacionados con el socket de Podman.

==================================================================================================================================================================
Crear y configurar podman.conf:



# Crear el archivo
vi /etc/systemd/system/podman.socket.d/podman.conf

Agrega el siguiente contenido a podman.conf:


ini
[Socket]
ListenStream=
ListenStream=/var/run/docker.sock
SocketMode=770
SocketUser=elastic
SocketGroup=podman


Establece la propiedad y los permisos:

sudo chown root:root /etc/systemd/system/podman.socket.d/podman.conf
sudo chmod 0644 /etc/systemd/system/podman.socket.d/podman.conf

==================================================================================================================================================================
Crear el script docker:

vi /usr/bin/docker
Agrega el siguiente contenido a /usr/bin/docker:

#!/bin/bash
podman-remote --url unix:///var/run/docker.sock "$@"


Establece permisos:

sudo chmod 0755 /usr/bin/docker

==================================================================================================================================================================
Configurar storage.conf:

# Agrega estas líneas a la sección [storage] en el archivo /etc/containers/storage.conf
sudo nano /etc/containers/storage.conf
Agrega:

ini

runroot = "/mnt/data/docker/runroot/"
graphroot = "/mnt/data/docker"

==================================================================================================================================================================
Habilitar los servicios de Podman:


sudo systemctl enable podman.service
sudo systemctl enable podman-restart.service

==================================================================================================================================================================
Habilitar el módulo del kernel overlay:

echo "overlay" | sudo tee -a /etc/modules-load.d/overlay.conf

==================================================================================================================================================================
Formatear la partición de datos adicional:

sudo mkfs.xfs /dev/nvme1n1

==================================================================================================================================================================
Crear el directorio de punto de montaje:

sudo install -o elastic -g elastic -d -m 700 /mnt/data

==================================================================================================================================================================
Agregar entrada a /etc/fstab para el volumen XFS:


sudo nano /etc/fstab
Agrega la línea (ajusta /dev/nvme1n1 según sea necesario):

/dev/nvme1n1 /mnt/data xfs defaults,nofail,x-systemd.automount,prjquota,pquota 0 2

Luego reinicia:
sudo systemctl daemon-reload
sudo systemctl restart local-fs.target

==================================================================================================================================================================
Establecer permisos en el dispositivo montado:

ls /mnt/data
sudo chown elastic:elastic /mnt/data

==================================================================================================================================================================
Crear el directorio de almacenamiento del servicio Docker:

sudo install -o elastic -g elastic -d -m 700 /mnt/data/docker

==================================================================================================================================================================
Deshabilitar el servicio firewalld:

sudo systemctl disable firewalld

==================================================================================================================================================================
Configurar parámetros del kernel:

sudo nano /etc/sysctl.conf
Agrega el siguiente contenido:

ini

vm.max_map_count=262144
net.ipv4.ip_forward=1
net.ipv4.tcp_retries2=5
vm.swappiness=1


Aplica la nueva configuración:

sudo sysctl -p
sudo systemctl restart NetworkManager

==================================================================================================================================================================
Ajustar los límites del sistema:

sudo nano /etc/security/limits.conf
Agrega los valores de configuración especificados.

==================================================================================================================================================================
Opcional: Autenticar al usuario elastic para el registro de Docker:

nano /home/elastic/.docker/config.json
Agrega el token de autenticación para el registro de Docker.

==================================================================================================================================================================
Reiniciar el servicio de Podman:

sudo systemctl daemon-reload
sudo systemctl restart podman

==================================================================================================================================================================
Reiniciar el host de RHEL:

sudo reboot


Estos pasos configuran el entorno para ejecutar Elastic en una instancia de un solo nodo utilizando Podman. Asegúrate de seguir cuidadosamente cada paso y modifica las configuraciones según sea necesario para tu configuración específica.

________________________________________________________________________________________________________________________________________________________________
Podman-compose.yaml :

version: '3'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.x
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    volumes:
      - /mnt/data/elasticsearch:/usr/share/elasticsearch/data
      - /etc/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    group: "podman"
    networks:
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:7.x
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - /etc/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    group: "podman"
    networks:
      - elastic

  logstash:
    image: docker.elastic.co/logstash/logstash:7.x
    container_name: logstash
    volumes:
      - /etc/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - /etc/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
    group: "podman"
    networks:
      - elastic

networks:
  elastic:
    driver: bridge


podman-compose up -d

Error: unable to start container "dddeed6a97dae54d1f5bbab0cfec279e6305874e29203e3eca7c9973ac03b648": unable to find user elastic: no matching entries in passwd file


[root@dkr-elk-hc01 ~]# podman-compose -f elastic-kibana-logstash_pcompose.yaml up -d
podman-compose version: 1.0.6
['podman', '--version', '']
using podman version: 4.6.1
** excluding:  set()
['podman', 'ps', '--filter', 'label=io.podman.compose.project=root', '-a', '--format', '{{ index .Labels "io.podman.compose.config-hash"}}']
recreating: ...
** excluding:  set()
podman stop -t 10 logstash
logstash
exit code: 0
podman stop -t 10 kibana
kibana
exit code: 0
podman stop -t 10 elasticsearch
elasticsearch
exit code: 0
podman rm logstash
logstash
exit code: 0
podman rm kibana
kibana
exit code: 0
podman rm elasticsearch
elasticsearch
exit code: 0
recreating: done


['podman', 'network', 'exists', 'root_elastic']
podman run --name=elasticsearch -d --label io.podman.compose.config-hash=828899f67f46aed630500b3880a3bc1f1794d1b8ac9a3ea9c7d281464e4bf67f --label io.podman.compose.project=root --label io.podman.compose.version=1.0.6 --label PODMAN_SYSTEMD_UNIT=podman-compose@root.service --label com.docker.compose.project=root --label com.docker.compose.project.working_dir=/root --label com.docker.compose.project.config_files=elastic-kibana-logstash_pcompose.yaml --label com.docker.compose.container-number=1 --label com.docker.compose.service=elasticsearch -e discovery.type=single-node -v /mnt/data/elasticsearch:/usr/share/elasticsearch/data -v /etc/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro --net root_elastic --network-alias elasticsearch -p 9200:9200 -p 9300:9300 registry.connect.redhat.com/elastic/elasticsearch:8.11.1-63f123cb
Error: OCI runtime error: crun: mount `/etc/elasticsearch/elasticsearch.yml` to `usr/share/elasticsearch/config/elasticsearch.yml`: Not a directory
exit code: 126
podman start elasticsearch
Error: OCI runtime error: unable to start container "73e3586bff6f35b58656dc0743a650460201357107b019ba1da11cb0f04bc0d0": crun: mount `/etc/elasticsearch/elasticsearch.yml` to `usr/share/elasticsearch/config/elasticsearch.yml`: Not a directory
exit code: 125
['podman', 'network', 'exists', 'root_elastic']
podman run --name=kibana -d --label io.podman.compose.config-hash=828899f67f46aed630500b3880a3bc1f1794d1b8ac9a3ea9c7d281464e4bf67f --label io.podman.compose.project=root --label io.podman.compose.version=1.0.6 --label PODMAN_SYSTEMD_UNIT=podman-compose@root.service --label com.docker.compose.project=root --label com.docker.compose.project.working_dir=/root --label com.docker.compose.project.config_files=elastic-kibana-logstash_pcompose.yaml --label com.docker.compose.container-number=1 --label com.docker.compose.service=kibana -e ELASTICSEARCH_URL=http://elasticsearch:9200 -v /etc/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro --net root_elastic --network-alias kibana -p 5601:5601 registry.connect.redhat.com/elastic/kibana:8.11.3-65c4b655
Error: OCI runtime error: crun: mount `/etc/kibana/kibana.yml` to `usr/share/kibana/config/kibana.yml`: Not a directory
exit code: 126
podman start kibana
Error: OCI runtime error: unable to start container "3a6c4f4b059e93cf8932e2d1344a7754dafdc40606daa29bc968d53048980f21": crun: mount `/etc/kibana/kibana.yml` to `usr/share/kibana/config/kibana.yml`: Not a directory
exit code: 125
['podman', 'network', 'exists', 'root_elastic']
podman run --name=logstash -d --label io.podman.compose.config-hash=828899f67f46aed630500b3880a3bc1f1794d1b8ac9a3ea9c7d281464e4bf67f --label io.podman.compose.project=root --label io.podman.compose.version=1.0.6 --label PODMAN_SYSTEMD_UNIT=podman-compose@root.service --label com.docker.compose.project=root --label com.docker.compose.project.working_dir=/root --label com.docker.compose.project.config_files=elastic-kibana-logstash_pcompose.yaml --label com.docker.compose.container-number=1 --label com.docker.compose.service=logstash -v /etc/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro -v /etc/logstash/pipeline:/usr/share/logstash/pipeline:ro --net root_elastic --network-alias logstash -p 5044:5044 registry.connect.redhat.com/elastic/logstash:8.11.3-65c4b655
Error: OCI runtime error: crun: mount `/etc/logstash/logstash.yml` to `usr/share/logstash/config/logstash.yml`: Not a directory
exit code: 126
podman start logstash
Error: OCI runtime error: unable to start container "aefc09f52a69ade7d9b7c06961b09a7ed696f17bda451cd4b9cabcb9ca033068": crun: mount `/etc/logstash/logstash.yml` to `usr/share/logstash/config/logstash.yml`: Not a directory
exit code: 125





==================================================================================================================================================================================================================
Before creating the container from the downloaded image, we need to create the data directory with the required ownership and SELinux context.


# mkdir /dbdata
# chown -R 27:27 /dbdata/
# semanage fcontext -a -t container_file_t '/dbdata(./*)?'
# restorecon -RFv /dbdata/
[root@openshift-lab ~]# semanage fcontext -a -t container_file_t '/dbdata(./*)?'
[root@openshift-lab ~]# restorecon -RFv /dbdata/
Relabeled /dbdata from unconfined_u:object_r:default_t:s0 to system_u:object_r:container_file_t:s0
[root@openshift-lab ~]# 
Once the volume is ready, create the container.
